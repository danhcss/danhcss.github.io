use ::java::data::worldgen::feature::block_predicate::BlockPredicate
use ::java::data::worldgen::feature::block_state_provider::BlockStateProvider
use ::java::data::worldgen::feature::tree::TreeDecorator
use ::java::data::worldgen::IntProvider

dispatch minecraft:resource[ohthetreesyoullgrow:configured_feature] to struct ConfiguredFeature {
	type: #[id] FeatureTypes,
	config: ohthetreesyoullgrow:feature_config[[type]],
}

enum(string) FeatureTypes {
	TreeFromNbt = "ohthetreesyoullgrow:tree_from_nbt_v1",
}

dispatch ohthetreesyoullgrow:feature_config[ohthetreesyoullgrow:tree_from_nbt_v1] to struct TreeFromNbt {
	/// The path to the trunk structure piece.
	base_location: #[id="structure"] string,
	/// The path to the canopy structure piece.
	canopy_location: #[id="structure"] string,
	/// Block filter for which this tree is allowed to grow on. Checks all of the red wool positions defined by the trunk.
	can_grow_on_filter: BlockPredicate,
	/// Block filter for which this tree's leaves are allowed to place.
	can_leaves_place_filter: BlockPredicate,
	decorators?: [TreeDecorator],
	/// Int provider defining the height of the tree.
	height: IntProvider<int>,
	leaves_provider: BlockStateProvider,
	leaves_target: [#[id="block"] string],
	log_provider: BlockStateProvider,
	log_target: [#[id="block"] string],
	max_log_depth?: int,
	/// Additional blocks from the structure pieces that should be placed in the world.
	place_from_nbt: [#[id="block"] string],
}
